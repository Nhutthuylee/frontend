{"ast":null,"code":"import axios from 'axios'; // export const userLoginFetch = (username, password) => {\n//     return axios.post('http://localhost:8000/auth/login/', username,password)\n//     .then(\n//         response =>{\n//             if(response.data.access_token){\n//                 localStorage.setItem(\"access_token\", response.data.access_token);\n//             }\n//                return response.data; \n//         }\n//     )\n// }\n// const loginUser = userObj =>({\n//     type: 'LOGIN_USER',\n//     payload: userObj\n// })\n\nconst SET_LOGIN_PENDING = 'SET_LOGIN_PENDING';\nconst SET_LOGIN_SUCCESS = 'SET_LOGIN_SUCCESS';\nconst SET_LOGIN_ERROR = 'SET_LOGIN_ERROR';\nexport const userLoginFetch = (username, password) => {\n  return dispatch => {\n    dispatch(setLoginPending(true));\n    dispatch(setLoginSuccess(false));\n    dispatch(setLoginError(null));\n    callLoginApi(username, password, error => {\n      dispatch(setLoginPending(false));\n\n      if (!error) {\n        dispatch(setLoginSuccess(true));\n      } else {\n        dispatch(setLoginError(error));\n      }\n    });\n  };\n};\nexport const callLoginApi = (username, password) => {\n  axios.post('http://localhost:8000/auth/login/', username, password).then(res => {\n    const token = res.data.access_token;\n    localStorage.setItem(\"access_token\", token);\n    console.log(token);\n  });\n};\n\nconst setLoginPending = isLoginPending => {\n  return {\n    type: SET_LOGIN_PENDING,\n    isLoginPending\n  };\n};\n\nconst setLoginSuccess = (isLoginSuccess, user) => {\n  return {\n    type: SET_LOGIN_SUCCESS,\n    isLoginSuccess\n  };\n};\n\nconst setLoginError = loginError => {\n  return {\n    type: SET_LOGIN_ERROR,\n    loginError\n  };\n};","map":{"version":3,"sources":["C:/Users/internship_5/Demo/internship_2020_java_team_demo/src/actions/loginAction.js"],"names":["axios","SET_LOGIN_PENDING","SET_LOGIN_SUCCESS","SET_LOGIN_ERROR","userLoginFetch","username","password","dispatch","setLoginPending","setLoginSuccess","setLoginError","callLoginApi","error","post","then","res","token","data","access_token","localStorage","setItem","console","log","isLoginPending","type","isLoginSuccess","user","loginError"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,iBAAiB,GAAE,mBAAzB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,eAAe,GAAG,iBAAxB;AACA,OAAO,MAAMC,cAAc,GAAE,CAACC,QAAD,EAAWC,QAAX,KAAsB;AACjD,SAAOC,QAAQ,IAAG;AAChBA,IAAAA,QAAQ,CAACC,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAD,IAAAA,QAAQ,CAACE,eAAe,CAAC,KAAD,CAAhB,CAAR;AACAF,IAAAA,QAAQ,CAACG,aAAa,CAAC,IAAD,CAAd,CAAR;AAEAC,IAAAA,YAAY,CAACN,QAAD,EAAWC,QAAX,EAAqBM,KAAK,IAAI;AACtCL,MAAAA,QAAQ,CAACC,eAAe,CAAC,KAAD,CAAhB,CAAR;;AACA,UAAI,CAACI,KAAL,EAAY;AACRL,QAAAA,QAAQ,CAACE,eAAe,CAAC,IAAD,CAAhB,CAAR;AACH,OAFD,MAEO;AACHF,QAAAA,QAAQ,CAACG,aAAa,CAACE,KAAD,CAAd,CAAR;AACH;AACJ,KAPW,CAAZ;AAQD,GAbD;AAcD,CAfM;AAgBP,OAAO,MAAMD,YAAY,GAAC,CAACN,QAAD,EAAWC,QAAX,KAAsB;AAC5CN,EAAAA,KAAK,CAACa,IAAN,CAAW,mCAAX,EAAgDR,QAAhD,EAAyDC,QAAzD,EACCQ,IADD,CAEIC,GAAG,IAAE;AACD,UAAMC,KAAK,GAAED,GAAG,CAACE,IAAJ,CAASC,YAAtB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCJ,KAArC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACH,GANL;AAQH,CATM;;AAWP,MAAMR,eAAe,GAAEe,cAAD,IAAoB;AACxC,SAAO;AACHC,IAAAA,IAAI,EAAEvB,iBADH;AAEHsB,IAAAA;AAFG,GAAP;AAID,CALD;;AAOA,MAAMd,eAAe,GAAC,CAACgB,cAAD,EAAiBC,IAAjB,KAAyB;AAC7C,SAAO;AACHF,IAAAA,IAAI,EAAEtB,iBADH;AAEHuB,IAAAA;AAFG,GAAP;AAID,CALD;;AAOA,MAAMf,aAAa,GAAEiB,UAAD,IAAe;AACjC,SAAO;AACHH,IAAAA,IAAI,EAAErB,eADH;AAEHwB,IAAAA;AAFG,GAAP;AAID,CALD","sourcesContent":["import axios from 'axios';\r\n\r\n// export const userLoginFetch = (username, password) => {\r\n\r\n//     return axios.post('http://localhost:8000/auth/login/', username,password)\r\n//     .then(\r\n//         response =>{\r\n//             if(response.data.access_token){\r\n//                 localStorage.setItem(\"access_token\", response.data.access_token);\r\n//             }\r\n//                return response.data; \r\n//         }\r\n\r\n//     )\r\n \r\n// }\r\n\r\n// const loginUser = userObj =>({\r\n//     type: 'LOGIN_USER',\r\n//     payload: userObj\r\n// })\r\n\r\nconst SET_LOGIN_PENDING ='SET_LOGIN_PENDING';\r\nconst SET_LOGIN_SUCCESS = 'SET_LOGIN_SUCCESS';\r\nconst SET_LOGIN_ERROR = 'SET_LOGIN_ERROR';\r\nexport const userLoginFetch =(username, password)=>{\r\n  return dispatch =>{\r\n    dispatch(setLoginPending(true));\r\n    dispatch(setLoginSuccess(false));\r\n    dispatch(setLoginError(null));\r\n\r\n    callLoginApi(username, password, error => {\r\n        dispatch(setLoginPending(false));\r\n        if (!error) {\r\n            dispatch(setLoginSuccess(true));\r\n        } else {\r\n            dispatch(setLoginError(error));\r\n        }\r\n    });\r\n  }\r\n}\r\nexport const callLoginApi=(username, password)=>{\r\n    axios.post('http://localhost:8000/auth/login/', username,password)\r\n    .then(\r\n        res=>{\r\n            const token= res.data.access_token\r\n            localStorage.setItem(\"access_token\", token);\r\n            console.log(token)\r\n        }\r\n    )\r\n}\r\n\r\nconst setLoginPending=(isLoginPending) => {\r\n  return {\r\n      type: SET_LOGIN_PENDING,\r\n      isLoginPending\r\n  };\r\n}\r\n\r\nconst setLoginSuccess=(isLoginSuccess, user) =>{\r\n  return {\r\n      type: SET_LOGIN_SUCCESS,\r\n      isLoginSuccess\r\n  };\r\n}\r\n\r\nconst setLoginError=(loginError) =>{\r\n  return {\r\n      type: SET_LOGIN_ERROR,\r\n      loginError\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}