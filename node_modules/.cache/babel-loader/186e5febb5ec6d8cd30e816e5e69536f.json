{"ast":null,"code":"import axios from 'axios';\nexport const userLoginFetch = (username, password) => {\n  return axios({\n    method: \"POST\",\n    url: \"http://localhost:8000/auth/login/\",\n    data: {\n      username: this.state.username,\n      password: this.state.password\n    }\n  }).then(response => {\n    const token = response.data.access_token;\n    localStorage.setItem(\"access_token\", token);\n    console.log(token);\n    console.log(this.state.username);\n  });\n}; //axios.post('http://localhost:8000/auth/login/', username,password)\n//     .then(\n//         response =>{\n//             if(response.data.access_token){\n//                 localStorage.setItem(\"access_token\", response.data.access_token);\n//             }\n//                return response.data; \n//         }\n//     )\n// }\n// const loginUser = userObj =>({\n//     type: 'LOGIN_USER',\n//     payload: userObj\n// })\n//   ).catch(error=>{\n//     console.log(error)\n// })\n// const SET_LOGIN_PENDING ='SET_LOGIN_PENDING';\n// const SET_LOGIN_SUCCESS = 'SET_LOGIN_SUCCESS';\n// const SET_LOGIN_ERROR = 'SET_LOGIN_ERROR';\n// export const userLoginFetch =(username, password)=>{\n//   return dispatch =>{\n//     dispatch(setLoginPending(true));\n//     dispatch(setLoginSuccess(false));\n//     dispatch(setLoginError(null));\n//     LoginApi(username, password, error => {\n//         dispatch(setLoginPending(false));\n//         if (!error) {\n//             dispatch(setLoginSuccess(true));\n//         } else {\n//             dispatch(setLoginError(error));\n//         }\n//     });\n//   }\n// }\n// export const LoginApi=(username, password,error)=>{\n//     axios.post('http://localhost:8000/auth/login/', username,password)\n//     .then(\n//         res=>{\n//             const token= res.data.access_token\n//             localStorage.setItem(\"access_token\", token);\n//             console.log(token)\n//         }\n//     ).catch(\n//         console.log(error)\n//     )\n// }\n// const setLoginPending=(isLoginPending) => {\n//   return {\n//       type: SET_LOGIN_PENDING,\n//       isLoginPending\n//   };\n// }\n// const setLoginSuccess=(isLoginSuccess, user) =>{\n//   return {\n//       type: SET_LOGIN_SUCCESS,\n//       isLoginSuccess\n//   };\n// }\n// const setLoginError=(loginError) =>{\n//   return {\n//       type: SET_LOGIN_ERROR,\n//       loginError\n//   }\n// }","map":{"version":3,"sources":["C:/Users/internship_5/Demo/internship_2020_java_team_demo/src/actions/loginAction.js"],"names":["axios","userLoginFetch","username","password","method","url","data","state","then","response","token","access_token","localStorage","setItem","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEC,OAAO,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAEnD,SAAOH,KAAK,CAAC;AACXI,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,GAAG,EAAE,mCAFM;AAGXC,IAAAA,IAAI,EAAE;AACJJ,MAAAA,QAAQ,EAAE,KAAKK,KAAL,CAAWL,QADjB;AAEJC,MAAAA,QAAQ,EAAE,KAAKI,KAAL,CAAWJ;AAFjB;AAHK,GAAD,CAAL,CAOJK,IAPI,CAQLC,QAAQ,IAAG;AACT,UAAMC,KAAK,GAAED,QAAQ,CAACH,IAAT,CAAcK,YAA3B;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCH,KAArC;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWL,QAAvB;AACD,GAbI,CAAP;AAcC,CAhBG,C,CAiBR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAIE;AACA;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\r\n\r\n export const userLoginFetch = (username, password) => {\r\n\r\n    return axios({\r\n      method: \"POST\",\r\n      url: \"http://localhost:8000/auth/login/\",\r\n      data: {\r\n        username: this.state.username,\r\n        password: this.state.password\r\n      }\r\n    }).then(\r\n      response =>{\r\n        const token= response.data.access_token\r\n        localStorage.setItem(\"access_token\", token)\r\n        console.log(token)\r\n        console.log(this.state.username)\r\n      })\r\n    }\r\n//axios.post('http://localhost:8000/auth/login/', username,password)\r\n//     .then(\r\n//         response =>{\r\n//             if(response.data.access_token){\r\n//                 localStorage.setItem(\"access_token\", response.data.access_token);\r\n//             }\r\n//                return response.data; \r\n//         }\r\n\r\n//     )\r\n \r\n// }\r\n\r\n// const loginUser = userObj =>({\r\n//     type: 'LOGIN_USER',\r\n//     payload: userObj\r\n// })\r\n\r\n\r\n      \r\n  //   ).catch(error=>{\r\n  //     console.log(error)\r\n  // })\r\n\r\n// const SET_LOGIN_PENDING ='SET_LOGIN_PENDING';\r\n// const SET_LOGIN_SUCCESS = 'SET_LOGIN_SUCCESS';\r\n// const SET_LOGIN_ERROR = 'SET_LOGIN_ERROR';\r\n// export const userLoginFetch =(username, password)=>{\r\n//   return dispatch =>{\r\n//     dispatch(setLoginPending(true));\r\n//     dispatch(setLoginSuccess(false));\r\n//     dispatch(setLoginError(null));\r\n\r\n//     LoginApi(username, password, error => {\r\n//         dispatch(setLoginPending(false));\r\n//         if (!error) {\r\n//             dispatch(setLoginSuccess(true));\r\n//         } else {\r\n//             dispatch(setLoginError(error));\r\n//         }\r\n//     });\r\n//   }\r\n// }\r\n// export const LoginApi=(username, password,error)=>{\r\n//     axios.post('http://localhost:8000/auth/login/', username,password)\r\n//     .then(\r\n//         res=>{\r\n//             const token= res.data.access_token\r\n//             localStorage.setItem(\"access_token\", token);\r\n//             console.log(token)\r\n//         }\r\n//     ).catch(\r\n//         console.log(error)\r\n//     )\r\n// }\r\n\r\n// const setLoginPending=(isLoginPending) => {\r\n//   return {\r\n//       type: SET_LOGIN_PENDING,\r\n//       isLoginPending\r\n//   };\r\n// }\r\n\r\n// const setLoginSuccess=(isLoginSuccess, user) =>{\r\n//   return {\r\n//       type: SET_LOGIN_SUCCESS,\r\n//       isLoginSuccess\r\n//   };\r\n// }\r\n\r\n// const setLoginError=(loginError) =>{\r\n//   return {\r\n//       type: SET_LOGIN_ERROR,\r\n//       loginError\r\n//   }\r\n// }"]},"metadata":{},"sourceType":"module"}